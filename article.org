* Introduction
In this article I'm going to explain how to manage AWS EC2 keys using
AWS commandline tools and Python with boto3 library. It allows to automate
tasks and work without using AWS console.
Before you start, you need to have commandline tools installed and configured
as described here: https://docs.aws.amazon.com/cli/latest/userguide/cli-chap-welcome.html
The same configuration is used by both tools: the commandline and boto3.
* Using commandline
** Uploading SSH public key
Instead creating a key with AWS console you can upload your default ssh key to EC2.
I allows to easy use default ssh key for a newly created instances.
#+BEGIN_SRC bash
  aws ec2 import-key-pair --key-name 'test-key' \
	     --public-key-material file://~/.ssh/id_rsa.pub
#+END_SRC
** Veryfying uploaded keys
You can display keys in your account:
#+BEGIN_SRC bash
  aws ec2 describe-key-pairs
#+END_SRC
The example output:
#+BEGIN_SRC json
  {
      "KeyPairs": [
	  {
	      "KeyFingerprint": "65:8f:82:a0:8f:53:77:ad:63:c8:f7:15:d6:36:69:04",
	      "KeyName": "maciekw@laptop"
	  },
	  {
	      "KeyFingerprint": "f7:35:02:f7:1e:f4:7c:e7:16:7b:f3:98:dc:f9:16:d6:d2:fd:13:21",
	      "KeyName": "test-key"
	  }
      ]
  }
#+END_SRC
AWS computes fingerprint differently then ssh-keygen -l command. To compare keys you
have to compute your local fingerprint in this way:
#+BEGIN_SRC bash
  openssl rsa -in ~/.ssh/id_rsa -pubout -outform DER |
    openssl md5 -c
#+END_SRC
It dumps public part of the key in DER format and computes MD5 sum.
** Creating keys with AWS
You can also create keys with AWS - like in console.
#+BEGIN_SRC bash
  aws ec2 create-key-pair --key-name "test-aws-created" |
    jq -r '.KeyMaterial'
#+END_SRC
The command creates key with is displayed in JSON file and extracts it.
You can redirect the command output to a file. Make sure you saved the new
key. There is other way to retrieve it.
The way of computing fingerprint created by AWS is different:
#+BEGIN_SRC bash
  openssl pkcs8 -in aws-created-key -inform PEM -outform DER -topk8 -nocrypt | 
    openssl sha1 -c
#+END_SRC
It dumps whole public key in DER and PKCS#8 format and computes SHA1 sum.
* Using python
The code pycryptodome package. I recommend using virtualenv.
** Computing fingerprints
First, we have to load the key from a file:
#+BEGIN_SRC python
  from Crypto.PublicKey import RSA

  with open('key_file') as key_file_obj:
      key = RSA.import_key(key_file_obj.read())
#+END_SRC
There is one problem. The library seems to be not supporting RFC4716 (Keys starting with
'---- BEGIN SSH2 PUBLIC KEY ----') . Use -m 'PEM' while creating keys.
Creating fingerprint for locally generated keys:
#+BEGIN_SRC python
    k_der = key.publickey().export_key(format='DER')
    hash_sum = hashlib.md5(k_der).hexdigest()
#+END_SRC
We're extracting public part of key, exporting it into DER format and computing
MD5.
In case of AWS genrated keys:
#+BEGIN_SRC python
    k_der = key.export_key(format='DER', pkcs=8)
    hash_sum = hashlib.sha1(k_der).hexdigest()
#+END_SRC
Here, we're stroring a public key in DER format and PKCS#8 standard. Then computing SHA1.
The last thing to format hex sum with 2-character sums separated by colons:
#+BEGIN_SRC python
def fp_format(in_str):
    chunks = [in_str[i:i+2] for i in range(0, len(in_str), 2)]
    return ":".join(chunks)
#+END_SRC
* references
https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-key-pairs.html
https://gist.github.com/jtriley/7270594
https://en.wikipedia.org/wiki/PKCS_8
